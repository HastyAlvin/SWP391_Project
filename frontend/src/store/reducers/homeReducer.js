// Import c√°c h√†m c·∫ßn thi·∫øt t·ª´ Redux Toolkit
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";  
// Import module API ƒë·ªÉ g·ªçi request ƒë·∫øn server  
import api from "../../api/api";  

// =============================
// üî• T·∫†O C√ÅC H√ÄM ASYNC THUNK üî•
// =============================

// H√†m async ƒë·ªÉ l·∫•y danh m·ª•c s·∫£n ph·∫©m t·ª´ API  
export const get_category = createAsyncThunk(
    'product/get_category', // T√™n action
    async(_, { fulfillWithValue }) => {
        try {
            // G·ªçi API l·∫•y danh m·ª•c s·∫£n ph·∫©m
            const { data } = await api.get('/home/get-categorys');  
            return fulfillWithValue(data); // Tr·∫£ v·ªÅ d·ªØ li·ªáu n·∫øu th√†nh c√¥ng
        } catch (error) {
            console.log(error.response); // In l·ªói ra console n·∫øu c√≥
        }
    }
);

// H√†m async ƒë·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ API  
export const get_products = createAsyncThunk(
    'product/get_products',
    async(_, { fulfillWithValue }) => {
        try {
            const { data } = await api.get('/home/get-products');  
            console.log(data); // In d·ªØ li·ªáu ra console (ki·ªÉm tra th·ª≠)
            return fulfillWithValue(data);
        } catch (error) {
            console.log(error.response);
        }
    }
);

// H√†m async ƒë·ªÉ l·∫•y kho·∫£ng gi√° s·∫£n ph·∫©m m·ªõi nh·∫•t
export const price_range_product = createAsyncThunk(
    'product/price_range_product',
    async(_, { fulfillWithValue }) => {
        try {
            const { data } = await api.get('/home/price-range-latest-product');
            console.log(data);
            return fulfillWithValue(data);
        } catch (error) {
            console.log(error.response);
        }
    }
);

// H√†m async ƒë·ªÉ l·∫•y s·∫£n ph·∫©m d·ª±a tr√™n b·ªô l·ªçc (category, price, rating...)
export const query_products = createAsyncThunk(
    'product/query_products',
    async(query , { fulfillWithValue }) => {
        try {
            // G·ª≠i request v·ªõi nhi·ªÅu query parameters
            const { data } = await api.get(`/home/query-products?category=${query.category}&&rating=${query.rating}&&lowPrice=${query.low}&&highPrice=${query.high}&&sortPrice=${query.sortPrice}&&pageNumber=${query.pageNumber}&&searchValue=${query.searchValue ? query.searchValue : ''}`);
            return fulfillWithValue(data);
        } catch (error) {
            console.log(error.response);
        }
    }
);

// H√†m async ƒë·ªÉ l·∫•y chi ti·∫øt s·∫£n ph·∫©m t·ª´ API theo slug
export const product_details = createAsyncThunk(
    'product/product_details',
    async(slug, { fulfillWithValue }) => {
        try {
            const { data } = await api.get(`/home/product-details/${slug}`);
            return fulfillWithValue(data);
        } catch (error) {
            console.log(error.response);
        }
    }
);

// H√†m async ƒë·ªÉ kh√°ch h√†ng g·ª≠i ƒë√°nh gi√° s·∫£n ph·∫©m
export const customer_review = createAsyncThunk(
    'review/customer_review',
    async(info, { fulfillWithValue }) => {
        try {
            const { data } = await api.post('/home/customer/submit-review', info);
            return fulfillWithValue(data);
        } catch (error) {
            console.log(error.response);
        }
    }
);

// H√†m async ƒë·ªÉ l·∫•y danh s√°ch ƒë√°nh gi√° s·∫£n ph·∫©m t·ª´ API
export const get_reviews = createAsyncThunk(
    'review/get_reviews',
    async({ productId, pageNumber }, { fulfillWithValue }) => {
        try {
            const { data } = await api.get(`/home/customer/get-reviews/${productId}?pageNo=${pageNumber}`);
            return fulfillWithValue(data);
        } catch (error) {
            console.log(error.response);
        }
    }
);

// H√†m async ƒë·ªÉ l·∫•y danh s√°ch banner qu·∫£ng c√°o
export const get_banners = createAsyncThunk(
    'banner/get_banners',
    async( _ , { fulfillWithValue }) => {
        try {
            const { data } = await api.get(`/banners`);
            return fulfillWithValue(data);
        } catch (error) {
            console.log(error.response);
        }
    }
);

// =============================
// üî• T·∫†O SLICE QU·∫¢N L√ù STATE üî•
// =============================
export const homeReducer = createSlice({
    name: 'home', // T√™n slice
    initialState: { // Tr·∫°ng th√°i ban ƒë·∫ßu
        categorys: [], // Danh m·ª•c s·∫£n ph·∫©m
        products: [], // Danh s√°ch s·∫£n ph·∫©m
        totalProduct: 0, // T·ªïng s·ªë s·∫£n ph·∫©m
        parPage: 3, // S·ªë s·∫£n ph·∫©m m·ªói trang
        latest_product: [], // S·∫£n ph·∫©m m·ªõi nh·∫•t
        topRated_product: [], // S·∫£n ph·∫©m ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t
        discount_product: [], // S·∫£n ph·∫©m gi·∫£m gi√°
        priceRange: { low: 0, high: 100 }, // Kho·∫£ng gi√° s·∫£n ph·∫©m
        product: {}, // Chi ti·∫øt s·∫£n ph·∫©m
        relatedProducts: [], // S·∫£n ph·∫©m li√™n quan
        moreProducts: [], // S·∫£n ph·∫©m kh√°c
        errorMessage: '', // Th√¥ng b√°o l·ªói
        successMessage: '', // Th√¥ng b√°o th√†nh c√¥ng
        totalReview: 0, // T·ªïng s·ªë ƒë√°nh gi√°
        rating_review: [], // D·ªØ li·ªáu ƒë√°nh gi√°
        reviews: [], // Danh s√°ch ƒë√°nh gi√°
        banners: [] // Danh s√°ch banner qu·∫£ng c√°o
    },
    reducers: { // C√°c reducer th√¥ng th∆∞·ªùng
        // H√†m x√≥a th√¥ng b√°o l·ªói v√† th√†nh c√¥ng
        messageClear: (state) => {
            state.errorMessage = "";
            state.successMessage = "";
        }
    },
    extraReducers: (builder) => { // X·ª≠ l√Ω action b·∫•t ƒë·ªìng b·ªô t·ª´ createAsyncThunk
        builder
        .addCase(get_category.fulfilled, (state, { payload }) => {
            state.categorys = payload.categorys; // C·∫≠p nh·∫≠t danh m·ª•c s·∫£n ph·∫©m
        })
        .addCase(get_products.fulfilled, (state, { payload }) => {
            state.products = payload.products; // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
            state.latest_product = payload.latest_product;
            state.topRated_product = payload.topRated_product;
            state.discount_product = payload.discount_product;
        })
        .addCase(price_range_product.fulfilled, (state, { payload }) => { 
            state.latest_product = payload.latest_product; // C·∫≠p nh·∫≠t s·∫£n ph·∫©m m·ªõi nh·∫•t
            state.priceRange = payload.priceRange; // C·∫≠p nh·∫≠t kho·∫£ng gi√° s·∫£n ph·∫©m
        })
        .addCase(query_products.fulfilled, (state, { payload }) => { 
            state.products = payload.products; // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
            state.totalProduct = payload.totalProduct; // C·∫≠p nh·∫≠t t·ªïng s·ªë s·∫£n ph·∫©m
            state.parPage = payload.parPage; // C·∫≠p nh·∫≠t s·ªë s·∫£n ph·∫©m m·ªói trang
        })
        .addCase(product_details.fulfilled, (state, { payload }) => { 
            state.product = payload.product; // C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m chi ti·∫øt
            state.relatedProducts = payload.relatedProducts; // C·∫≠p nh·∫≠t s·∫£n ph·∫©m li√™n quan
            state.moreProducts = payload.moreProducts; // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m kh√°c
        })
        .addCase(customer_review.fulfilled, (state, { payload }) => {
            state.successMessage = payload.message; // C·∫≠p nh·∫≠t th√¥ng b√°o th√†nh c√¥ng
        })
        .addCase(get_reviews.fulfilled, (state, { payload }) => {
            state.reviews = payload.reviews; // C·∫≠p nh·∫≠t danh s√°ch ƒë√°nh gi√°
            state.totalReview = payload.totalReview; // C·∫≠p nh·∫≠t t·ªïng s·ªë ƒë√°nh gi√°
            state.rating_review = payload.rating_review; // C·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë√°nh gi√°
        })
        .addCase(get_banners.fulfilled, (state, { payload }) => {
            state.banners = payload.banners; // C·∫≠p nh·∫≠t danh s√°ch banner qu·∫£ng c√°o
        });
    }
});

// Xu·∫•t reducer v√† action
export const { messageClear } = homeReducer.actions;
export default homeReducer.reducer;
